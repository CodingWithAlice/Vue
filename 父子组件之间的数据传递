<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>父子组件传值</title>
    <script src='./vue.js'></script>
</head>
<body>
    <div id="root">
        <!-- 父组件怎么向子组件传递数据：通过属性 -->
            <!-- 在这里,count前面不加冒号,传递的是字符串,加了冒号传递的是js表达式,这里就是数字
            // 在vue中有一个单向数据流的概念，父组件可以随意向子组件传递参数，但是子组件不可以修改父组件传递过来的参数
            // 如果直接写this.count++的话，会出现一个警告，提示不要直接修改父组件传过来的数据
            // 所以在此,定义data里面的number作为count的副本,然后修改number的值 -->
        <counter :count='2' @increase='handleIncrease'></counter>
        <counter :count='3' @increase='handleIncrease'></counter>
        <!-- 子组件怎么向父组件传递数据: 通过事件  -->
            <!-- // 这里向外触发一个increase事件，同时可以传递每次改变都加步长2,step
            // 让父组件监听,在根组件中添加handleIncrease事件,传入步长2 -->
        <div >{{total}}</div>
    </div>
    <script>
        // 这里用的是局部组件
        var counter={
            props:['count'],
            data:function(){
                return {
                    number:this.count
                }
            },
            template:'<div @click="handleClick">{{number}}</div>',
            methods:{
                handleClick:function(){        
                    this.number = this.number + 2;
                    this.$emit('increase',2);
                
                }
            }
        }
        var vm = new Vue ({
            el : '#root',
            data:{
                total:5
            },
            components:{
                counter:counter
            },
            methods:{
                handleIncrease:function(step){
                    this.total += 2
                }
            }
        })
    </script>
</body>
</html>
