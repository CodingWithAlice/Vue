<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>全局/局部组件的使用</title>
    <script src="./vue.js"></script>
</head>
<body>
    <div id="app">
        <input type="text" v-model='inputValue'> 
        <!-- input里面的value值和vue实例中的inputValue进行了双向的数据绑定 -->
        <button v-on:click='handleBtnClick'>提交</button>
        <ul>
            <!-- <li v-for='item in list'>{{item}} </li> -->
            <todo-item  :content='item' 
                        :index='index'
                        v-for='(item,index) in list'
                        @delete='handleItemDelete'>
                        <!-- 监听事件，v-on/@ -->
                        
            </todo-item>
            <!-- 在这里，有v-for可以将list中的内容赋值给item，然后通过v-bind来将item中的数据传输给content，用组件中的props来接收 -->
        </ul>
    </div>

    <script>
        //  全局组件，名称叫做TodoItem，内容是li标签
        //  使用的时候，TodoItem 等价于 todo-item 来使用
        // Vue.component('TodoItem',{
        //     props:['content'],
        //     template:'<li>{{content}}</li>'
        // })

        // 局部组件,不能直接使用，需要注册到下面的应用实例里面
        var TodoItem = {
            props:['content','index'],
            template:'<li @click="handleItemClick">{{content}}</li>',
            methods:{
                handleItemClick:function(){
                    this.$emit('delete',this.index)//向外触发一个事件
                }
            }
        }

        var app = new Vue({
            el : '#app',
            components:{
                TodoItem:TodoItem
            },
            //局部组件需要声明
            data : {
                list : [],
                inputValue:''
            },
            methods:{
                handleBtnClick:function(){
                    this.list.push(this.inputValue)
                    this.inputValue=''
                },
                handleItemDelete:function(index){
                    this.list.splice(index,1)
                }
            }
        })
    </script>
</body>
</html>
